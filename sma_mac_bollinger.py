# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17pUTPZub5Y1K6zi2UVvg0iOy8aTrUTNX
"""

#import the libraries 
!pip install yfinance
!pip install pandas_ta 
import yfinance as yf 
import pandas as pd
import pandas_datareader.data as web
import pandas_ta as ta
import numpy as np
from datetime import datetime
import matplotlib.pyplot as plt
plt.style.use('fivethirtyeight')
yf.pdr_override()

#load the price data
stocksymbols = ['BTC-USD', 'ETH-USD']
startdate = datetime(2020,1,1)
end_date = datetime.today()
print(end_date)
def getMyPortfolio(stocks = stocksymbols ,start = startdate , end = end_date):
    data = web.get_data_yahoo(stocks , data_source='yahoo' , start = start ,end= end )
    return data

btc_data = getMyPortfolio('BTC-USD')
eth_data = getMyPortfolio('ETH-USD')
bnb_data = getMyPortfolio('BNB-USD')
usdt_data = getMyPortfolio('USDT-USD')
sol_data = getMyPortfolio('SOL1-USD')
hex_data = getMyPortfolio('HEX-USD')
ada_data = getMyPortfolio('ADA-USD')
btc_data, eth_data, bnb_data, usdt_data, sol_data, hex_data, ada_data

btc_data['SMA 30'] = ta.sma(btc_data['Close'],30)
btc_data['SMA 100'] = ta.sma(btc_data['Close'],100)
#eth_data['SMA 30'] = ta.sma(eth_data['Close'],30)
#eth_data['SMA 100'] = ta.sma(eth_data['Close'],100)

def buy_sell(data):
    signalBuy = []
    signalSell = []
    position = False 

    for i in range(len(data)):
        if data['SMA 30'][i] > data['SMA 100'][i]:
            if position == False :
                signalBuy.append(data['Adj Close'][i])
                signalSell.append(np.nan)
                position = True
            else:
                signalBuy.append(np.nan)
                signalSell.append(np.nan)
        elif data['SMA 30'][i] < data['SMA 100'][i]:
            if position == True:
                signalBuy.append(np.nan)
                signalSell.append(data['Adj Close'][i])
                position = False
            else:
                signalBuy.append(np.nan)
                signalSell.append(np.nan)
        else:
            signalBuy.append(np.nan)
            signalSell.append(np.nan)
    return pd.Series([signalBuy, signalSell])

btc_data['Buy_Signal_price'], btc_data['Sell_Signal_price'] = buy_sell(btc_data)
btc_data

#show the btc_data close prices and indicator
fig, ax = plt.subplots(figsize=(16,6))
ax.plot(btc_data['Adj Close'] , label = stocksymbols[0] ,linewidth=0.5, color='blue', alpha = 0.9)
ax.plot(btc_data['SMA 30'], label = 'SMA30', alpha = 0.85)
ax.plot(btc_data['SMA 100'], label = 'SMA100' , alpha = 0.85)
ax.scatter(btc_data.index , btc_data['Buy_Signal_price'] , label = 'Buy' , marker = '^', color = 'green',alpha =1 )
ax.scatter(btc_data.index , btc_data['Sell_Signal_price'] , label = 'Sell' , marker = 'v', color = 'red',alpha =1 )
ax.set_title(stocksymbols[0] + " Price History with buy and sell signals",fontsize=10, backgroundcolor='blue', color='white')
ax.set_xlabel(f'{startdate} - {end_date}' ,fontsize=18)
ax.set_ylabel('Close Price INR (â‚¨)' , fontsize=18)
legend = ax.legend()
ax.grid()
plt.tight_layout()
plt.show()

short_ema = btc_data.Close.ewm(span =12, adjust= False).mean()
long_ema = btc_data.Close.ewm(span=26,adjust=False).mean()
macd = short_ema - long_ema
signal = macd.ewm(span=9, adjust=False).mean()

plt.figure(figsize = (16.4,4.1))
plt.plot(btc_data.index,macd, label= 'Macd', color ='red',linewidth= 1)
plt.plot(btc_data.index, signal, label='Signal Line', color='blue',alpha=0.35)
plt.show()

btc_data['Macd'] = macd
btc_data['Signal line'] = signal

def buy_sell_macd(signal):
   buy = []
   sell = []
   flag = -1

   for i in range(0, len(signal)):
     if(signal['Macd'][i]> signal['Signal line'][i]):
       sell.append(np.nan)
       if flag != 1:
         buy.append(signal['Close'][i])
         flag = 1
       else:
         buy.append(np.nan)
     elif(signal['Macd'][i]< signal['Signal line'][i]):
       buy.append(np.nan)
       if flag != 0:
         sell.append(signal['Close'][i])
         flag = 0
       else:
         sell.append(np.nan)
     else:
       buy.append(np.nan)
       sell.append(np.nan)
   return (buy,sell)

a = buy_sell_macd(btc_data)
btc_data['buy_signal_macd'] = a[0]
btc_data['sell_signal_macd'] = a[1]

plt.figure(figsize = (16.4,4.1))
plt.title('Buy and Sell Signal')
plt.scatter(btc_data.index, btc_data['buy_signal_macd'], label= 'buy', color ='green', marker = '^', alpha=1)
plt.scatter(btc_data.index, btc_data['sell_signal_macd'], label='sell', color='red', marker = 'v', alpha=1)
plt.plot(btc_data['Close'], label = 'Close price', alpha = 0.35, color ='violet')
plt.xlabel('Date')
plt.ylabel('Close prices')
plt.show()

#for calculating bollinger first define sma function
def sma(data, window):
    sma = data.rolling(window = window).mean()
    return sma

btc_data['sma_20'] = sma(btc_data['Close'], 20)

def bb(data, sma, window):
    std = data.rolling(window = window).std()
    upper_bb = sma + std * 2
    lower_bb = sma - std * 2
    return upper_bb, lower_bb

btc_data['upper_bb'], btc_data['lower_bb'] = bb(btc_data['Close'], btc_data['sma_20'], 20)

btc_data['Close'].plot(label = 'CLOSE PRICES', color = 'skyblue',figsize =(16,4))
btc_data['upper_bb'].plot(label = 'UPPER BB 20', linestyle = '--', linewidth = 1, color = 'black')
btc_data['sma_20'].plot(label = 'MIDDLE BB 20', linestyle = '--', linewidth = 1.2, color = 'violet')
btc_data['lower_bb'].plot(label = 'LOWER BB 20', linestyle = '--', linewidth = 1, color = 'black')
plt.legend(loc = 'upper left')
plt.title('BTC BOLLINGER BANDS')
plt.show()

def implement_bb_strategy(data, lower_bb, upper_bb):
    buy_price = []
    sell_price = []
    bb_signal = []
    signal = 0
    
    for i in range(len(data)):
        if data[i-1] > lower_bb[i-1] and data[i] < lower_bb[i]:
            if signal != 1:
                buy_price.append(data[i])
                sell_price.append(np.nan)
                signal = 1
                bb_signal.append(signal)
            else:
                buy_price.append(np.nan)
                sell_price.append(np.nan)
                bb_signal.append(0)
        elif data[i-1] < upper_bb[i-1] and data[i] > upper_bb[i]:
            if signal != -1:
                buy_price.append(np.nan)
                sell_price.append(data[i])
                signal = -1
                bb_signal.append(signal)
            else:
                buy_price.append(np.nan)
                sell_price.append(np.nan)
                bb_signal.append(0)
        else:
            buy_price.append(np.nan)
            sell_price.append(np.nan)
            bb_signal.append(0)
            
    return buy_price, sell_price, bb_signal

buy_price, sell_price, bb_signal = implement_bb_strategy(btc_data['Close'], btc_data['lower_bb'], btc_data['upper_bb'])

btc_data['Close'].plot(label = 'CLOSE PRICES', alpha = 0.3, figsize =(16,4))
btc_data['upper_bb'].plot(label = 'UPPER BB', linestyle = '--', linewidth = 1, color = 'black')
btc_data['sma_20'].plot(label = 'MIDDLE BB', linestyle = '--', linewidth = 1.2, color = 'violet')
btc_data['lower_bb'].plot(label = 'LOWER BB', linestyle = '--', linewidth = 1, color = 'black')
plt.scatter(btc_data.index, buy_price, marker = '^', color = 'green', label = 'BUY', s = 60)
plt.scatter(btc_data.index, sell_price, marker = 'v', color = 'red', label = 'SELL', s = 60)
plt.title('BTC BB STRATEGY TRADING SIGNALS')
plt.legend(loc = 'upper left')
plt.show()

xrp_data = getMyPortfolio('XRP-USD')
usdc_data = getMyPortfolio('USDC-USD')
luna1_data = getMyPortfolio('LUNA1-USD')
avax_data = getMyPortfolio('AVAX-USD')
dot_data = getMyPortfolio('DOT-USD')
doge_data = getMyPortfolio('DOGE-USD')
shib_data = getMyPortfolio('SHIB-USD')
xrp_data, usdc_data, luna1_data, avax_data, dot_data, doge_data,shib_data

matic_data = getMyPortfolio('MATIC-USD')
ltc_data = getMyPortfolio('LTC-USD')
link_data = getMyPortfolio('LINK-USD')
algo_data = getMyPortfolio('ALGO-USD')
uni_data = getMyPortfolio('UNI3-USD')
dai_data = getMyPortfolio('DAI1-USD')
matic_data, ltc_data, link_data, algo_data, uni_data, dai_data